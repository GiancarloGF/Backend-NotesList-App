{"version":3,"sources":["components/Note.js","components/Footer.js","components/SuccesMessage.js","components/ErrorMessage.js","components/Togglable.js","components/LoginForm.js","components/NoteForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Footer","style","color","fontStyle","fontSize","Notification","message","Togglable","props","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","buttonLabel","children","LoginForm","handleLogin","handleUsername","handlePassword","username","password","onSubmit","type","value","name","onChange","NoteForm","addNote","newNote","handleNoteChange","placeholder","baseUrl","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","App","notes","setNotes","setNewNote","showAll","setShowAll","succesMessage","setSuccesMessage","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","notesToShow","filter","event","preventDefault","loginService","setItem","stringify","setTimeout","ErrorMessage","SuccesMessage","target","e","noteObject","date","Date","toISOString","Math","random","length","returnedNote","concat","map","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7561eaa5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = { color: \"black\", fontStyle: \"italic\", fontSize: 16 };\r\n  return (\r\n    <div style={footerStyle}>\r\n      {\" \"}\r\n      <br />{\" \"}\r\n      <em>\r\n        Note app, Giancarlo Guerra 2021\r\n      </em>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"success\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","const Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification\r\n","import React, { useState } from 'react'\r\n\r\n// This component show information about form's login or button to display the form's login.\r\nconst Togglable = (props) => {\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Button to log in and display login form*/}\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n\r\n      {/* Login form and cancel button */}\r\n      <div style={showWhenVisible}>\r\n        {/*Each component or element that are inside of Togglabe are childrens */}\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Togglable;","\r\nconst LoginForm=({\r\n  handleLogin,\r\n  handleUsername, \r\n  handlePassword,\r\n  username,\r\n  password \r\n  })=>{\r\n  \r\n      return (\r\n        <>\r\n\r\n          <div >\r\n            <form onSubmit={handleLogin}>\r\n              <div>\r\n                username\r\n                <input\r\n                  type=\"text\"\r\n                  value={username}\r\n                  name=\"Username\"\r\n                  onChange={handleUsername}\r\n                />\r\n              </div>\r\n              <div>\r\n                password\r\n                <input\r\n                  type=\"password\"\r\n                  value={password}\r\n                  name=\"Password\"\r\n                  onChange={handlePassword}\r\n                />\r\n              </div>\r\n              <button type='submit' >Log in</button>\r\n            </form>\r\n            \r\n\r\n          </div>\r\n        </>\r\n      )\r\n}\r\nexport default LoginForm;\r\n","const NoteForm=({addNote,newNote, handleNoteChange,name})=>{\r\n      return (\r\n            <di>\r\n                  <h2>hola {name} üñê</h2>\r\n                  <form onSubmit={addNote}>\r\n                        <input value={newNote} onChange={handleNoteChange} placeholder=\"Agregar nueva nota...\" />\r\n                        <button type=\"submit\">save</button>\r\n                  </form>\r\n            </di>\r\n      \r\n      )\r\n}\r\nexport default NoteForm;","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";//URL relativa. https://fullstackopen.com/es/part3/implementacion_de_la_aplicacion_en_internet#proxy\r\n\r\n// At first, token is set with a null value. Once we logged successfully, token variable will have a valid value.\r\nlet token=null\r\n//üëÜ\r\n// Function to modify the token string. It turns the token into a string with 'bearer' concatenated each time we login.\r\nconst setToken=(newToken) => {\r\n  token= `bearer ${newToken}`\r\n}\r\n\r\n// Function to get back all notes.\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// Function to create a new note\r\nconst create = async (newObject) => {\r\n  // Structure of headers\r\n  const config={\r\n    headers:{Authorization: token}\r\n  };\r\n  const response = await axios.post(baseUrl, newObject, config);//Response from the server with confirmation of created note.\r\n  return response.data;//Send back the response to the frontend (React).\r\n};\r\n\r\n// Function to uddate a note.\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  setToken\r\n};\r\n\r\n","import axios from 'axios'\r\nconst baseUrl='/api/login'\r\n\r\n//If login is successful, then we save the token from the server. username and name are included.\r\nconst login=async credentials=>{\r\n      const response= await axios.post(baseUrl,credentials);\r\n      return response.data;// {token, username, name}\r\n}\r\n\r\nexport default {login}","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Footer from \"./components/Footer\";\nimport SuccesMessage from \"./components/SuccesMessage\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport Togglable from \"./components/Togglable\";\nimport LoginForm from \"./components/LoginForm\";\nimport NoteForm from \"./components/NoteForm\";\nimport noteService from \"./services/notes\";\nimport loginService from \"./services/login\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]); //Estado que guarda las notas.\n  const [newNote, setNewNote] = useState(\"\"); //Estado que guarda el valor de una nota actual.Este valor controla el valor del input del fomulario (componente controlado)\n  const [showAll, setShowAll] = useState(true);\n  const [succesMessage, setSuccesMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [username, setUsername]=useState('');\n  const [password, setPassword]=useState('');\n  const [user, setUser]= useState(null);\n  // const [loginVisible, setLoginVisible]=useState(false);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []); //useEffect(funcion de efecto, array de elementos que renderizaran useEffect cuando estos cambien)\n\n  // Cuando se carga la pagina, se verifica si el usuario ya esta logeado. Si no borramos los datos del localstroge, siempre estaremos logeados.\n  useEffect(() => {\n    const loggedUserJSON=window.localStorage.getItem('loggedNoteappUser');\n    if(loggedUserJSON){\n      const user=JSON.parse(loggedUserJSON);\n      setUser(user);//actualizamos nuestro estado user.\n      noteService.setToken(user.token);//Guardo el token para luego mandarlo al servidor cuando se crea una nueva nota.\n    }\n  },[])\n\n  const addNote = (e) => {\n    e.preventDefault();\n    //Modelo de dato que se guardara.\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setSuccesMessage(`Nota creada exitosamente`);\n      setTimeout(() => {\n        setSuccesMessage(null);\n      }, 5000);\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id); //Obtenemos la nota (objeto) que queremos modificar. Es una referencia a un valor de nuestro estado, !no modificar esta nota direnctamente!\n    const changedNote = { ...note, important: !note.important };\n\n    /*Esta opcion no es valida(aunque hace lo mismo): \n        const note = notes.find(n => n.id === id)\n        note.important = !note.important\n\n        La variable note es una referencia a un elemento en el array notes en el estado del componente, y como recordamos, nunca debemos mutar el estado directamente en React.\n\n     */\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        //Aqui podria agregar un mensaje exitoso.\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        //setErrorMessage(`the note ${note.content} was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (e) => {\n    //console.log(e.target.value);\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true); //tambien es valido: (note)=>note.important-> devuelve un nuevo array con las note que cumplan la condicion.\n\n  //HandleEvent to validate login and save token from server each time we log in.\n  const handleLogin= async (event) => {\n    event.preventDefault();\n    try {\n      const user= await loginService.login({username, password});//Get the response from server if login is successful.\n      \n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));//Token saved in localstorage first.\n      noteService.setToken(user.token);//It take token and save it in a variable in services/noteService.js.\n\n      setUser(user);//Token, username and name are saved in user state.\n      setUsername('')//To clean the username input.\n      setPassword('')//To clean the password input.\n      setSuccesMessage(`Login exitoso`);//Display an succesed message.\n      setTimeout(() => {\n        setSuccesMessage(null);\n      }, 5000);\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')//Display an error message in the front.\n      setTimeout(() => {//To clean the error message.\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleUsername = ({target}) =>setUsername(target.value) \n  const handlePassword= ({target}) =>setPassword(target.value)\n  // const handleLoginVisible=() => setLoginVisible(true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      {/**Mensaje de error customizado */}\n      <ErrorMessage message={errorMessage} />\n      {/**Mensaje de exito customizado */}\n      <SuccesMessage message={succesMessage} />\n\n      {/* Mostramos el form de login o el form de notas segun el estado user(logeado o no), tambien mostramos el nombre si se logea correctamente.*/}\n      {/* {user ===null && loginForm()}\n      {user !== null && noteForm()} */}\n      {user===null\n      ?(\n        <Togglable buttonLabel='log in'>\n          <LoginForm \n            handleLogin={handleLogin} \n            handlePassword={handlePassword} \n            handleUsername={handleUsername}\n            username={username} \n            password={password}\n          />\n        </Togglable>\n      )\n      :(\n        <NoteForm \n            addNote={addNote}  \n            name={user.name} \n            newNote={newNote} \n            handleNoteChange={handleNoteChange}/>)}\n\n      {/* Boton para cambiar estado a importante o no */}\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n\n      {/* Listas de notas renderizadas */}\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n     {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}