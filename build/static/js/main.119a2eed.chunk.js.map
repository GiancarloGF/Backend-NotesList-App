{"version":3,"sources":["components/Note.js","services/notes.js","components/Footer.js","components/SuccesMessage.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","succesMessage","setSuccesMessage","useEffect","noteService","initialNotes","notesToShow","filter","SuccesMessage","map","find","n","changedNote","returnedNote","catch","error","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","length","setTimeout","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gNAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCNpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCA9BK,EAbA,WAEb,OACE,sBAAKC,MAFa,CAAEC,MAAO,QAASC,UAAW,SAAUC,SAAU,IAEnE,UACG,IACD,uBAAO,IACP,uGAEM,QCAGC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAKnB,UAAU,UAAf,SAA0BmB,KCgGpBC,EAhGH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0CN,mBAAS,MAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAGAC,qBAAU,WACRC,IAAqBzB,MAAK,SAAC0B,GACzBT,EAASS,QAEV,IAEH,IAgDMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAACtC,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,gCACE,uCAGA,cAACoC,EAAD,CAAehB,QAASS,IACxB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAIlC,6BACGO,EAAYG,KAAI,SAACxC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAjDD,SAACc,GAC1B,IAAMf,EAAO0B,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAE3B,KAAOA,KAClC4B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAShDgC,EACUpB,EAAI4B,GACXjC,MAAK,SAACkC,GAELjB,EAASD,EAAMc,KAAI,SAACxC,GAAD,OAAWA,EAAKe,KAAOA,EAAKf,EAAO4C,SAEvDC,OAAM,SAACC,GAENnB,EAASD,EAAMY,QAAO,SAACI,GAAD,OAAOA,EAAE3B,KAAOA,SA8BVgC,CAAmB/C,EAAKe,MAF3Cf,EAAKe,SAOhB,uBAAMiC,SA1EM,SAACC,GACfA,EAAEC,iBAEF,IAAMC,EAAa,CACjB9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGrBtB,EAAmBgB,GAAYzC,MAAK,SAACkC,GACnCX,EAAiB,4BACjByB,YAAW,WACTzB,EAAiB,QAChB,KACHN,EAASD,EAAMiC,OAAOf,IACtBf,EAAW,QA0DX,UACE,uBAAO+B,MAAOhC,EAASiC,SAhCJ,SAACZ,GAExBpB,EAAWoB,EAAEa,OAAOF,UAgChB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC7FNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.119a2eed.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update\r\n};\r\n\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = { color: \"green\", fontStyle: \"italic\", fontSize: 16 };\r\n  return (\r\n    <div style={footerStyle}>\r\n      {\" \"}\r\n      <br />{\" \"}\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2020\r\n      </em>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"success\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Footer from \"./components/Footer\";\nimport SuccesMessage from \"./components/SuccesMessage\";\nimport ErrorMessage from \"./components/ErrorMessage\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]); //Estado que guarda las notas.\n  const [newNote, setNewNote] = useState(\"\"); //Estado que guarda el valor de una nota actual.Este valor controla el valor del input del fomulario (componente controlado)\n  const [showAll, setShowAll] = useState(true);\n  const [succesMessage, setSuccesMessage] = useState(null);\n  //const [errorMessage, setErrorMessage] = useState();\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []); //useEffect(funcion de efecto, array de elementos que renderizaran useEffect cuando estos cambien)\n\n  const addNote = (e) => {\n    e.preventDefault();\n    //Modelo de dato que se guardara.\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setSuccesMessage(`Nota creada exitosamente`);\n      setTimeout(() => {\n        setSuccesMessage(null);\n      }, 5000);\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id); //Obtenemos la nota (objeto) que queremos modificar. Es una referencia a un valor de nuestro estado, !no modificar esta nota direnctamente!\n    const changedNote = { ...note, important: !note.important };\n\n    /*Esta opcion no es valida(aunque hace lo mismo): \n        const note = notes.find(n => n.id === id)\n        note.important = !note.important\n\n        La variable note es una referencia a un elemento en el array notes en el estado del componente, y como recordamos, nunca debemos mutar el estado directamente en React.\n\n     */\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        //Aqui podria agregar un mensaje exitoso.\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        //setErrorMessage(`the note ${note.content} was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (e) => {\n    //console.log(e.target.value);\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true); //tambien es valido: (note)=>note.important-> devuelve un nuevo array con las note que cumplan la condicion.\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      {/*<ErrorMessage message={errorMessage} />*/}\n      {/**Mensaje de exito customizado */}\n      <SuccesMessage message={succesMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}